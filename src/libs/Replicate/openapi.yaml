openapi: 3.0.1
info:
  title: Replicate HTTP API
  description: A web service for running Replicate models
  termsOfService: https://replicate.com/terms
  contact:
    email: team@replicate.com
  version: 1.0.0-a1
servers:
  - url: https://api.replicate.com/v1
paths:
  /account:
    get:
      summary: Get the authenticated account
      description: "Returns information about the user or organization associated with the provided API token.\n\nExample cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/account\n```\n\nThe response will be a JSON object describing the account:\n\n```json\n{\n  \"type\": \"organization\",\n  \"username\": \"acme\",\n  \"name\": \"Acme Corp, Inc.\",\n  \"github_url\": \"https://github.com/acme\",\n}\n```\n"
      operationId: account.get
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  github_url:
                    type: string
                    description: The GitHub URL of the account.
                    format: uri
                  name:
                    type: string
                    description: The name of the account.
                  type:
                    enum:
                      - organization
                      - user
                    type: string
                    description: The account type. Can be a user or an organization.
                  username:
                    type: string
                    description: The username of the account.
  /collections:
    get:
      summary: List collections of models
      description: "Example cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/collections\n```\n\nThe response will be a paginated JSON list of collection objects:\n\n```json\n{\n  \"next\": \"null\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"name\": \"Super resolution\",\n      \"slug\": \"super-resolution\",\n      \"description\": \"Upscaling models that create high-quality images from low-quality images.\"\n    }\n  ]\n}\n```\n"
      operationId: collections.list
      responses:
        '200':
          description: Success
  '/collections/{collection_slug}':
    get:
      summary: Get a collection of models
      description: "Example cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/collections/super-resolution\n```\n\nThe response will be a collection object with a nested list of the models in that collection:\n\n```json\n{\n  \"name\": \"Super resolution\",\n  \"slug\": \"super-resolution\",\n  \"description\": \"Upscaling models that create high-quality images from low-quality images.\",\n  \"models\": [...]\n}\n```\n"
      operationId: collections.get
      parameters:
        - name: collection_slug
          in: path
          description: "The slug of the collection, like `super-resolution` or `image-restoration`. See [replicate.com/collections](https://replicate.com/collections).\n"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
  /deployments:
    get:
      summary: List deployments
      description: "Get a list of deployments associated with the current account, including the latest release configuration for each deployment.\n\nExample cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/deployments\n```\n\nThe response will be a paginated JSON array of deployment objects, sorted with the most recent deployment first:\n\n```json\n{\n  \"next\": \"http://api.replicate.com/v1/deployments?cursor=cD0yMDIzLTA2LTA2KzIzJTNBNDAlM0EwOC45NjMwMDAlMkIwMCUzQTAw\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"replicate\",\n      \"name\": \"my-app-image-generator\",\n      \"current_release\": {\n        \"number\": 1,\n        \"model\": \"stability-ai/sdxl\",\n        \"version\": \"da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\",\n        \"created_at\": \"2024-02-15T16:32:57.018467Z\",\n        \"created_by\": {\n          \"type\": \"organization\",\n          \"username\": \"acme\",\n          \"name\": \"Acme Corp, Inc.\",\n          \"github_url\": \"https://github.com/acme\",\n        },\n        \"configuration\": {\n          \"hardware\": \"gpu-t4\",\n          \"min_instances\": 1,\n          \"max_instances\": 5\n        }\n      }\n    }\n  ]\n}\n```\n"
      operationId: deployments.list
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  next:
                    type: string
                    description: A URL pointing to the next page of deployment objects if any
                    nullable: true
                  previous:
                    type: string
                    description: A URL pointing to the previous page of deployment objects if any
                    nullable: true
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        current_release:
                          type: object
                          properties:
                            configuration:
                              type: object
                              properties:
                                hardware:
                                  type: string
                                  description: The SKU for the hardware used to run the model.
                                max_instances:
                                  type: integer
                                  description: The maximum number of instances for scaling.
                                min_instances:
                                  type: integer
                                  description: The minimum number of instances for scaling.
                            created_at:
                              type: string
                              description: The time the release was created.
                              format: date-time
                            created_by:
                              type: object
                              properties:
                                github_url:
                                  type: string
                                  description: The GitHub URL of the account that created the release.
                                  format: uri
                                name:
                                  type: string
                                  description: The name of the account that created the release.
                                type:
                                  enum:
                                    - organization
                                    - user
                                  type: string
                                  description: The account type of the creator. Can be a user or an organization.
                                username:
                                  type: string
                                  description: The username of the account that created the release.
                            model:
                              type: string
                              description: 'The model identifier string in the format of `{model_owner}/{model_name}`.'
                            number:
                              type: integer
                              description: 'The release number. This is an auto-incrementing integer that starts at 1, and is set automatically when a deployment is created.'
                            version:
                              type: string
                              description: The ID of the model version used in the release.
                        name:
                          type: string
                          description: The name of the deployment.
                        owner:
                          type: string
                          description: The owner of the deployment.
                    description: An array containing a page of deployment objects
    post:
      summary: Create a deployment
      description: "Create a new deployment:\n\nExample cURL request:\n\n```console\ncurl -s \\\n  -X POST \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"name\": \"my-app-image-generator\",\n        \"model\": \"stability-ai/sdxl\",\n        \"version\": \"da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\",\n        \"hardware\": \"gpu-t4\",\n        \"min_instances\": 0,\n        \"max_instances\": 3\n      }' \\\n  https://api.replicate.com/v1/deployments\n```\n\nThe response will be a JSON object describing the deployment:\n\n```json\n{\n  \"owner\": \"acme\",\n  \"name\": \"my-app-image-generator\",\n  \"current_release\": {\n    \"number\": 1,\n    \"model\": \"stability-ai/sdxl\",\n    \"version\": \"da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\",\n    \"created_at\": \"2024-02-15T16:32:57.018467Z\",\n    \"created_by\": {\n      \"type\": \"organization\",\n      \"username\": \"acme\",\n      \"name\": \"Acme Corp, Inc.\",\n      \"github_url\": \"https://github.com/acme\",\n    },\n    \"configuration\": {\n      \"hardware\": \"gpu-t4\",\n      \"min_instances\": 1,\n      \"max_instances\": 5\n    }\n  }\n}\n```\n"
      operationId: deployments.create
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
                - model
                - version
                - hardware
                - min_instances
                - max_instances
              type: object
              properties:
                hardware:
                  type: string
                  description: The SKU for the hardware used to run the model. Possible values can be retrieved from the `hardware.list` endpoint.
                max_instances:
                  maximum: 20
                  minimum: 0
                  type: integer
                  description: The maximum number of instances for scaling.
                min_instances:
                  maximum: 5
                  minimum: 0
                  type: integer
                  description: The minimum number of instances for scaling.
                model:
                  type: string
                  description: The full name of the model that you want to deploy e.g. stability-ai/sdxl.
                name:
                  type: string
                  description: The name of the deployment.
                version:
                  type: string
                  description: The 64-character string ID of the model version that you want to deploy.
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_release:
                    type: object
                    properties:
                      configuration:
                        type: object
                        properties:
                          hardware:
                            type: string
                            description: The SKU for the hardware used to run the model.
                          max_instances:
                            type: integer
                            description: The maximum number of instances for scaling.
                          min_instances:
                            type: integer
                            description: The minimum number of instances for scaling.
                      created_at:
                        type: string
                        description: The time the release was created.
                        format: date-time
                      created_by:
                        type: object
                        properties:
                          github_url:
                            type: string
                            description: The GitHub URL of the account that created the release.
                            format: uri
                          name:
                            type: string
                            description: The name of the account that created the release.
                          type:
                            enum:
                              - organization
                              - user
                            type: string
                            description: The account type of the creator. Can be a user or an organization.
                          username:
                            type: string
                            description: The username of the account that created the release.
                      model:
                        type: string
                        description: 'The model identifier string in the format of `{model_owner}/{model_name}`.'
                      number:
                        type: integer
                        description: The release number.
                      version:
                        type: string
                        description: The ID of the model version used in the release.
                  name:
                    type: string
                    description: The name of the deployment.
                  owner:
                    type: string
                    description: The owner of the deployment.
  '/deployments/{deployment_owner}/{deployment_name}':
    delete:
      summary: Delete a deployment
      description: "Delete a deployment\n\nDeployment deletion has some restrictions:\n\n- You can only delete deployments that have been offline and unused for at least 15 minutes.\n\nExample cURL request:\n\n```command\ncurl -s -X DELETE \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/deployments/acme/my-app-image-generator\n```\n\nThe response will be an empty 204, indicating the deployment has been deleted.\n"
      operationId: deployments.delete
      parameters:
        - name: deployment_owner
          in: path
          description: "The name of the user or organization that owns the deployment.\n"
          required: true
          schema:
            type: string
        - name: deployment_name
          in: path
          description: "The name of the deployment.\n"
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
    get:
      summary: Get a deployment
      description: "Get information about a deployment by name including the current release.\n\nExample cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/deployments/replicate/my-app-image-generator\n```\n\nThe response will be a JSON object describing the deployment:\n\n```json\n{\n  \"owner\": \"acme\",\n  \"name\": \"my-app-image-generator\",\n  \"current_release\": {\n    \"number\": 1,\n    \"model\": \"stability-ai/sdxl\",\n    \"version\": \"da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\",\n    \"created_at\": \"2024-02-15T16:32:57.018467Z\",\n    \"created_by\": {\n      \"type\": \"organization\",\n      \"username\": \"acme\",\n      \"name\": \"Acme Corp, Inc.\",\n      \"github_url\": \"https://github.com/acme\",\n    },\n    \"configuration\": {\n      \"hardware\": \"gpu-t4\",\n      \"min_instances\": 1,\n      \"max_instances\": 5\n    }\n  }\n}\n```\n"
      operationId: deployments.get
      parameters:
        - name: deployment_owner
          in: path
          description: "The name of the user or organization that owns the deployment.\n"
          required: true
          schema:
            type: string
        - name: deployment_name
          in: path
          description: "The name of the deployment.\n"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_release:
                    type: object
                    properties:
                      configuration:
                        type: object
                        properties:
                          hardware:
                            type: string
                            description: The SKU for the hardware used to run the model.
                          max_instances:
                            type: integer
                            description: The maximum number of instances for scaling.
                          min_instances:
                            type: integer
                            description: The minimum number of instances for scaling.
                      created_at:
                        type: string
                        description: The time the release was created.
                        format: date-time
                      created_by:
                        type: object
                        properties:
                          github_url:
                            type: string
                            description: The GitHub URL of the account that created the release.
                            format: uri
                          name:
                            type: string
                            description: The name of the account that created the release.
                          type:
                            enum:
                              - organization
                              - user
                            type: string
                            description: The account type of the creator. Can be a user or an organization.
                          username:
                            type: string
                            description: The username of the account that created the release.
                      model:
                        type: string
                        description: 'The model identifier string in the format of `{model_owner}/{model_name}`.'
                      number:
                        type: integer
                        description: The release number.
                      version:
                        type: string
                        description: The ID of the model version used in the release.
                  name:
                    type: string
                    description: The name of the deployment.
                  owner:
                    type: string
                    description: The owner of the deployment.
    patch:
      summary: Update a deployment
      description: "Update properties of an existing deployment, including hardware, min/max instances, and the deployment's underlying model [version](https://replicate.com/docs/how-does-replicate-work#versions).\n\nExample cURL request:\n\n```console\ncurl -s \\\n  -X PATCH \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"min_instances\": 3, \"max_instances\": 10}' \\\n  https://api.replicate.com/v1/deployments/acme/my-app-image-generator\n```\n\nThe response will be a JSON object describing the deployment:\n\n```json\n{\n  \"owner\": \"acme\",\n  \"name\": \"my-app-image-generator\",\n  \"current_release\": {\n    \"number\": 2,\n    \"model\": \"stability-ai/sdxl\",\n    \"version\": \"da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\",\n    \"created_at\": \"2024-02-15T16:32:57.018467Z\",\n    \"created_by\": {\n      \"type\": \"organization\",\n      \"username\": \"acme\",\n      \"name\": \"Acme Corp, Inc.\",\n      \"github_url\": \"https://github.com/acme\",\n    },\n    \"configuration\": {\n      \"hardware\": \"gpu-t4\",\n      \"min_instances\": 3,\n      \"max_instances\": 10\n    }\n  }\n}\n```\n\nUpdating any deployment properties will increment the `number` field of the `current_release`.\n"
      operationId: deployments.update
      parameters:
        - name: deployment_owner
          in: path
          description: "The name of the user or organization that owns the deployment.\n"
          required: true
          schema:
            type: string
        - name: deployment_name
          in: path
          description: "The name of the deployment.\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hardware:
                  type: string
                  description: The SKU for the hardware used to run the model. Possible values can be retrieved from the `hardware.list` endpoint.
                max_instances:
                  maximum: 20
                  minimum: 0
                  type: integer
                  description: The maximum number of instances for scaling.
                min_instances:
                  maximum: 5
                  minimum: 0
                  type: integer
                  description: The minimum number of instances for scaling.
                version:
                  type: string
                  description: The ID of the model version that you want to deploy
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_release:
                    type: object
                    properties:
                      configuration:
                        type: object
                        properties:
                          hardware:
                            type: string
                            description: The SKU for the hardware used to run the model.
                          max_instances:
                            type: integer
                            description: The maximum number of instances for scaling.
                          min_instances:
                            type: integer
                            description: The minimum number of instances for scaling.
                      created_at:
                        type: string
                        description: The time the release was created.
                        format: date-time
                      created_by:
                        type: object
                        properties:
                          github_url:
                            type: string
                            description: The GitHub URL of the account that created the release.
                            format: uri
                          name:
                            type: string
                            description: The name of the account that created the release.
                          type:
                            enum:
                              - organization
                              - user
                            type: string
                            description: The account type of the creator. Can be a user or an organization.
                          username:
                            type: string
                            description: The username of the account that created the release.
                      model:
                        type: string
                        description: 'The model identifier string in the format of `{model_owner}/{model_name}`.'
                      number:
                        type: integer
                        description: The release number.
                      version:
                        type: string
                        description: The ID of the model version used in the release.
                  name:
                    type: string
                    description: The name of the deployment.
                  owner:
                    type: string
                    description: The owner of the deployment.
  '/deployments/{deployment_owner}/{deployment_name}/predictions':
    post:
      summary: Create a prediction using a deployment
      description: "Start a new prediction for a deployment of a model using inputs you provide.\n\nExample request body:\n\n```json\n{\n  \"input\": {\n    \"text\": \"Alice\"\n  }\n}\n```\n\nExample cURL request:\n\n```console\ncurl -s -X POST \\\n  -d '{\"input\": {\"text\": \"Alice\"}}' \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  -H 'Content-Type: application/json' \\\n  \"https://api.replicate.com/v1/deployments/replicate/hello-world/predictions\"\n```\n\nThe response will be the prediction object:\n\n```json\n{\n  \"id\": \"86b6trbv99rgp0cf1h886f69ew\",\n  \"model\": \"replicate/hello-world\",\n  \"version\": \"dp-8e43d61c333b5ddc7a921130bc3ab3ea\",\n  \"input\": {\n    \"text\": \"Alice\"\n  },\n  \"logs\": \"\",\n  \"error\": null,\n  \"status\": \"starting\",\n  \"created_at\": \"2024-04-23T18:55:52.138Z\",\n  \"urls\": {\n    \"cancel\": \"https://api.replicate.com/v1/predictions/86b6trbv99rgp0cf1h886f69ew/cancel\",\n    \"get\": \"https://api.replicate.com/v1/predictions/86b6trbv99rgp0cf1h886f69ew\"\n  }\n}\n```\n\nAs models can take several seconds or more to run, the output will not be available immediately. To get the final result of the prediction you should either provide a `webhook` HTTPS URL for us to call when the results are ready, or poll the [get a prediction](#predictions.get) endpoint until it has finished.\n\nInput and output (including any files) will be automatically deleted after an hour, so you must save a copy of any files in the output if you'd like to continue using them.\n\nOutput files are served by `replicate.delivery` and its subdomains. If you use an allow list of external domains for your assets, add `replicate.delivery` and `*.replicate.delivery` to it.\n"
      operationId: deployments.predictions.create
      parameters:
        - name: deployment_owner
          in: path
          description: "The name of the user or organization that owns the deployment.\n"
          required: true
          schema:
            type: string
        - name: deployment_name
          in: path
          description: "The name of the deployment.\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/prediction_request'
      responses:
        '200':
          description: Success
  /hardware:
    get:
      summary: List available hardware for models
      description: "Example cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/hardware\n```\n\nThe response will be a JSON array of hardware objects:\n\n```json\n[\n    {\"name\": \"CPU\", \"sku\": \"cpu\"},\n    {\"name\": \"Nvidia T4 GPU\", \"sku\": \"gpu-t4\"},\n    {\"name\": \"Nvidia A40 GPU\", \"sku\": \"gpu-a40-small\"},\n    {\"name\": \"Nvidia A40 (Large) GPU\", \"sku\": \"gpu-a40-large\"},\n]\n```\n"
      operationId: hardware.list
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the hardware.
                    sku:
                      type: string
                      description: The SKU of the hardware.
  /models:
    get:
      summary: List public models
      description: "Get a paginated list of public models.\n\nExample cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/models\n```\n\nThe response will be a paginated JSON array of model objects:\n\n```json\n{\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"url\": \"https://replicate.com/acme/hello-world\",\n      \"owner\": \"acme\",\n      \"name\": \"hello-world\",\n      \"description\": \"A tiny model that says hello\",\n      \"visibility\": \"public\",\n      \"github_url\": \"https://github.com/replicate/cog-examples\",\n      \"paper_url\": null,\n      \"license_url\": null,\n      \"run_count\": 5681081,\n      \"cover_image_url\": \"...\",\n      \"default_example\": {...},\n      \"latest_version\": {...}\n    }\n  ]\n}\n```\n\nThe `cover_image_url` string is an HTTPS URL for an image file. This can be:\n\n- An image uploaded by the model author.\n- The output file of the example prediction, if the model author has not set a cover image.\n- The input file of the example prediction, if the model author has not set a cover image and the example prediction has no output file.\n- A generic fallback image.\n"
      operationId: models.list
      responses:
        '200':
          description: Success
    post:
      summary: Create a model
      description: "Create a model.\n\nExample cURL request:\n\n```console\ncurl -s -X POST \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"owner\": \"alice\", \"name\": \"my-model\", \"description\": \"An example model\", \"visibility\": \"public\", \"hardware\": \"cpu\"}' \\\n  https://api.replicate.com/v1/models\n```\n\nThe response will be a model object in the following format:\n\n```json\n{\n  \"url\": \"https://replicate.com/alice/my-model\",\n  \"owner\": \"alice\",\n  \"name\": \"my-model\",\n  \"description\": \"An example model\",\n  \"visibility\": \"public\",\n  \"github_url\": null,\n  \"paper_url\": null,\n  \"license_url\": null,\n  \"run_count\": 0,\n  \"cover_image_url\": null,\n  \"default_example\": null,\n  \"latest_version\": null,\n}\n```\n\nNote that there is a limit of 1,000 models per account. For most purposes, we recommend using a single model and pushing new [versions](https://replicate.com/docs/how-does-replicate-work#versions) of the model as you make changes to it.\n"
      operationId: models.create
      requestBody:
        content:
          application/json:
            schema:
              required:
                - owner
                - name
                - visibility
                - hardware
              type: object
              properties:
                cover_image_url:
                  type: string
                  description: A URL for the model's cover image. This should be an image file.
                description:
                  type: string
                  description: A description of the model.
                github_url:
                  type: string
                  description: A URL for the model's source code on GitHub.
                hardware:
                  type: string
                  description: The SKU for the hardware used to run the model. Possible values can be retrieved from the `hardware.list` endpoint.
                license_url:
                  type: string
                  description: A URL for the model's license.
                name:
                  type: string
                  description: The name of the model. This must be unique among all models owned by the user or organization.
                owner:
                  type: string
                  description: 'The name of the user or organization that will own the model. This must be the same as the user or organization that is making the API request. In other words, the API token used in the request must belong to this user or organization.'
                paper_url:
                  type: string
                  description: A URL for the model's paper.
                visibility:
                  enum:
                    - public
                    - private
                  type: string
                  description: 'Whether the model should be public or private. A public model can be viewed and run by anyone, whereas a private model can be viewed and run only by the user or organization members that own the model.'
        required: true
      responses:
        '201':
          description: Success
  '/models/{model_owner}/{model_name}':
    delete:
      summary: Delete a model
      description: "Delete a model\n\nModel deletion has some restrictions:\n\n- You can only delete models you own.\n- You can only delete private models.\n- You can only delete models that have no versions associated with them. Currently you'll need to [delete the model's versions](#models.versions.delete) before you can delete the model itself.\n\nExample cURL request:\n\n```command\ncurl -s -X DELETE \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/models/replicate/hello-world\n```\n\nThe response will be an empty 204, indicating the model has been deleted.\n"
      operationId: models.delete
      parameters:
        - name: model_owner
          in: path
          description: "The name of the user or organization that owns the model.\n"
          required: true
          schema:
            type: string
        - name: model_name
          in: path
          description: "The name of the model.\n"
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
    get:
      summary: Get a model
      description: "Example cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/models/replicate/hello-world\n```\n\nThe response will be a model object in the following format:\n\n```json\n{\n  \"url\": \"https://replicate.com/replicate/hello-world\",\n  \"owner\": \"replicate\",\n  \"name\": \"hello-world\",\n  \"description\": \"A tiny model that says hello\",\n  \"visibility\": \"public\",\n  \"github_url\": \"https://github.com/replicate/cog-examples\",\n  \"paper_url\": null,\n  \"license_url\": null,\n  \"run_count\": 5681081,\n  \"cover_image_url\": \"...\",\n  \"default_example\": {...},\n  \"latest_version\": {...},\n}\n```\n\nThe `cover_image_url` string is an HTTPS URL for an image file. This can be:\n\n- An image uploaded by the model author.\n- The output file of the example prediction, if the model author has not set a cover image.\n- The input file of the example prediction, if the model author has not set a cover image and the example prediction has no output file.\n- A generic fallback image.\n\nThe `default_example` object is a [prediction](#predictions.get) created with this model.\n\nThe `latest_version` object is the model's most recently pushed [version](#models.versions.get).\n"
      operationId: models.get
      parameters:
        - name: model_owner
          in: path
          description: "The name of the user or organization that owns the model.\n"
          required: true
          schema:
            type: string
        - name: model_name
          in: path
          description: "The name of the model.\n"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
  '/models/{model_owner}/{model_name}/predictions':
    post:
      summary: Create a prediction using an official model
      description: "Start a new prediction for an official model using the inputs you provide.\n\nExample request body:\n\n```json\n{\n  \"input\": {\n    \"prompt\": \"Write a short poem about the weather.\"\n  }\n}\n```\n\nExample cURL request:\n\n```console\ncurl -s -X POST \\\n  -d '{\"input\": {\"prompt\": \"Write a short poem about the weather.\"}}' \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  -H 'Content-Type: application/json' \\\n  https://api.replicate.com/v1/models/meta/meta-llama-3-70b-instruct/predictions\n```\n\nThe response will be the prediction object:\n\n```json\n{\n  \"id\": \"25s2s4n7rdrgg0cf1httb3myk0\",\n  \"model\": \"replicate-internal/llama3-70b-chat-vllm-unquantized\",\n  \"version\": \"dp-cf04fe09351e25db628e8b6181276547\",\n  \"input\": {\n    \"prompt\": \"Write a short poem about the weather.\"\n  },\n  \"logs\": \"\",\n  \"error\": null,\n  \"status\": \"starting\",\n  \"created_at\": \"2024-04-23T19:36:28.355Z\",\n  \"urls\": {\n    \"cancel\": \"https://api.replicate.com/v1/predictions/25s2s4n7rdrgg0cf1httb3myk0/cancel\",\n    \"get\": \"https://api.replicate.com/v1/predictions/25s2s4n7rdrgg0cf1httb3myk0\"\n  }\n}\n```\n\nAs models can take several seconds or more to run, the output will not be available immediately. To get the final result of the prediction you should either provide a `webhook` HTTPS URL for us to call when the results are ready, or poll the [get a prediction](#predictions.get) endpoint until it has finished.\n\nAll input parameters, output values, and logs are automatically removed after an hour, by default, for predictions created through the API.\n\nOutput files are served by `replicate.delivery` and its subdomains. If you use an allow list of external domains for your assets, add `replicate.delivery` and `*.replicate.delivery` to it.\n"
      operationId: models.predictions.create
      parameters:
        - name: model_owner
          in: path
          description: "The name of the user or organization that owns the model.\n"
          required: true
          schema:
            type: string
        - name: model_name
          in: path
          description: "The name of the model.\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/prediction_request'
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/prediction_response'
  '/models/{model_owner}/{model_name}/versions':
    get:
      summary: List model versions
      description: "Example cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/models/replicate/hello-world/versions\n```\n\nThe response will be a JSON array of model version objects, sorted with the most recent version first:\n\n```json\n{\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",\n      \"created_at\": \"2022-04-26T19:29:04.418669Z\",\n      \"cog_version\": \"0.3.0\",\n      \"openapi_schema\": {...}\n    }\n  ]\n}\n```\n"
      operationId: models.versions.list
      parameters:
        - name: model_owner
          in: path
          description: "The name of the user or organization that owns the model.\n"
          required: true
          schema:
            type: string
        - name: model_name
          in: path
          description: "The name of the model.\n"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
  '/models/{model_owner}/{model_name}/versions/{version_id}':
    delete:
      summary: Delete a model version
      description: "Delete a model version and all associated predictions, including all output files.\n\nModel version deletion has some restrictions:\n\n- You can only delete versions from models you own.\n- You can only delete versions from private models.\n- You cannot delete a version if someone other than you has run predictions with it.\n- You cannot delete a version if it is being used as the base model for a fine tune/training.\n- You cannot delete a version if it has an associated deployment.\n- You cannot delete a version if another model version is overridden to use it.\n\nExample cURL request:\n\n```command\ncurl -s -X DELETE \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/models/replicate/hello-world/versions/5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\n```\n\nThe response will be an empty 202, indicating the deletion request has been accepted. It might take a few minutes to be processed.\n"
      operationId: models.versions.delete
      parameters:
        - name: model_owner
          in: path
          description: "The name of the user or organization that owns the model.\n"
          required: true
          schema:
            type: string
        - name: model_name
          in: path
          description: "The name of the model.\n"
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: "The ID of the version.\n"
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Deletion request has been accepted. It might take a few minutes to be processed.
    get:
      summary: Get a model version
      description: "Example cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/models/replicate/hello-world/versions/5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\n```\n\nThe response will be the version object:\n\n```json\n{\n  \"id\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",\n  \"created_at\": \"2022-04-26T19:29:04.418669Z\",\n  \"cog_version\": \"0.3.0\",\n  \"openapi_schema\": {...}\n}\n```\n\nEvery model describes its inputs and outputs with [OpenAPI Schema Objects](https://spec.openapis.org/oas/latest.html#schemaObject) in the `openapi_schema` property.\n\nThe `openapi_schema.components.schemas.Input` property for the [replicate/hello-world](https://replicate.com/replicate/hello-world) model looks like this:\n\n```json\n{\n  \"type\": \"object\",\n  \"title\": \"Input\",\n  \"required\": [\n    \"text\"\n  ],\n  \"properties\": {\n    \"text\": {\n      \"x-order\": 0,\n      \"type\": \"string\",\n      \"title\": \"Text\",\n      \"description\": \"Text to prefix with 'hello '\"\n    }\n  }\n}\n```\n\nThe `openapi_schema.components.schemas.Output` property for the [replicate/hello-world](https://replicate.com/replicate/hello-world) model looks like this:\n\n```json\n{\n  \"type\": \"string\",\n  \"title\": \"Output\"\n}\n```\n\nFor more details, see the docs on [Cog's supported input and output types](https://github.com/replicate/cog/blob/75b7802219e7cd4cee845e34c4c22139558615d4/docs/python.md#input-and-output-types)\n"
      operationId: models.versions.get
      parameters:
        - name: model_owner
          in: path
          description: "The name of the user or organization that owns the model.\n"
          required: true
          schema:
            type: string
        - name: model_name
          in: path
          description: "The name of the model.\n"
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: "The ID of the version.\n"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
  '/models/{model_owner}/{model_name}/versions/{version_id}/trainings':
    post:
      summary: Create a training
      description: "Start a new training of the model version you specify.\n\nExample request body:\n\n```json\n{\n  \"destination\": \"{new_owner}/{new_name}\",\n  \"input\": {\n    \"train_data\": \"https://example.com/my-input-images.zip\",\n  },\n  \"webhook\": \"https://example.com/my-webhook\",\n}\n```\n\nExample cURL request:\n\n```console\ncurl -s -X POST \\\n  -d '{\"destination\": \"{new_owner}/{new_name}\", \"input\": {\"input_images\": \"https://example.com/my-input-images.zip\"}}' \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  -H 'Content-Type: application/json' \\\n  https://api.replicate.com/v1/models/stability-ai/sdxl/versions/da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf/trainings\n```\n\nThe response will be the training object:\n\n```json\n{\n  \"id\": \"zz4ibbonubfz7carwiefibzgga\",\n  \"model\": \"stability-ai/sdxl\",\n  \"version\": \"da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\",\n  \"input\": {\n    \"input_images\": \"https://example.com/my-input-images.zip\"\n  },\n  \"logs\": \"\",\n  \"error\": null,\n  \"status\": \"starting\",\n  \"created_at\": \"2023-09-08T16:32:56.990893084Z\",\n  \"urls\": {\n    \"cancel\": \"https://api.replicate.com/v1/predictions/zz4ibbonubfz7carwiefibzgga/cancel\",\n    \"get\": \"https://api.replicate.com/v1/predictions/zz4ibbonubfz7carwiefibzgga\"\n  }\n}\n```\n\nAs models can take several minutes or more to train, the result will not be available immediately. To get the final result of the training you should either provide a `webhook` HTTPS URL for us to call when the results are ready, or poll the [get a training](#trainings.get) endpoint until it has finished.\n\nWhen a training completes, it creates a new [version](https://replicate.com/docs/how-does-replicate-work#terminology) of the model at the specified destination.\n\nTo find some models to train on, check out the [trainable language models collection](https://replicate.com/collections/trainable-language-models).\n"
      operationId: trainings.create
      parameters:
        - name: model_owner
          in: path
          description: "The name of the user or organization that owns the model.\n"
          required: true
          schema:
            type: string
        - name: model_name
          in: path
          description: "The name of the model.\n"
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: "The ID of the version.\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/training_request'
      responses:
        '201':
          description: Success
  /predictions:
    get:
      summary: List predictions
      description: "Get a paginated list of predictions that you've created. This will include predictions created from the API and the website. It will return 100 records per page.\n\nExample cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/predictions\n```\n\nThe response will be a paginated JSON array of prediction objects, sorted with the most recent prediction first:\n\n```json\n{\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"completed_at\": \"2023-09-08T16:19:34.791859Z\",\n      \"created_at\": \"2023-09-08T16:19:34.907244Z\",\n      \"data_removed\": false,\n      \"error\": null,\n      \"id\": \"gm3qorzdhgbfurvjtvhg6dckhu\",\n      \"input\": {\n        \"text\": \"Alice\"\n      },\n      \"metrics\": {\n        \"predict_time\": 0.012683\n      },\n      \"output\": \"hello Alice\",\n      \"started_at\": \"2023-09-08T16:19:34.779176Z\",\n      \"source\": \"api\",\n      \"status\": \"succeeded\",\n      \"urls\": {\n        \"get\": \"https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu\",\n        \"cancel\": \"https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel\"\n      },\n      \"model\": \"replicate/hello-world\",\n      \"version\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",\n    }\n  ]\n}\n```\n\n`id` will be the unique ID of the prediction.\n\n`source` will indicate how the prediction was created. Possible values are `web` or `api`.\n\n`status` will be the status of the prediction. Refer to [get a single prediction](#predictions.get) for possible values.\n\n`urls` will be a convenience object that can be used to construct new API requests for the given prediction. If the requested model version supports streaming, this will have a `stream` entry with an HTTPS URL that you can use to construct an [`EventSource`](https://developer.mozilla.org/en-US/docs/Web/API/EventSource).\n\n`model` will be the model identifier string in the format of `{model_owner}/{model_name}`.\n\n`version` will be the unique ID of model version used to create the prediction.\n\n`data_removed` will be `true` if the input and output data has been deleted.\n"
      operationId: predictions.list
      responses:
        '200':
          description: Success
    post:
      summary: Create a prediction
      description: "Start a new prediction for the model version and inputs you provide.\n\nExample request body:\n\n```json\n{\n  \"version\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",\n  \"input\": {\n    \"text\": \"Alice\"\n  }\n}\n```\n\nExample cURL request:\n\n```console\ncurl -s -X POST \\\n  -d '{\"version\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\", \"input\": {\"text\": \"Alice\"}}' \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  -H 'Content-Type: application/json' \\\n  https://api.replicate.com/v1/predictions\n```\n\nThe response will be the prediction object:\n\n```json\n{\n  \"id\": \"gm3qorzdhgbfurvjtvhg6dckhu\",\n  \"model\": \"replicate/hello-world\",\n  \"version\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",\n  \"input\": {\n    \"text\": \"Alice\"\n  },\n  \"output\": null,\n  \"logs\": \"\",\n  \"error\": null,\n  \"status\": \"starting\",\n  \"created_at\": \"2023-09-08T16:19:34.765994657Z\",\n  \"urls\": {\n    \"cancel\": \"https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel\",\n    \"get\": \"https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu\"\n  }\n}\n```\n\nAs models can take several seconds or more to run, the output will not be available immediately. To get the final result of the prediction you should either provide a `webhook` HTTPS URL for us to call when the results are ready, or poll the [get a prediction](#predictions.get) endpoint until it has finished.\n\nInput and output (including any files) will be automatically deleted after an hour, so you must save a copy of any files in the output if you'd like to continue using them.\n\nOutput files are served by `replicate.delivery` and its subdomains. If you use an allow list of external domains for your assets, add `replicate.delivery` and `*.replicate.delivery` to it.\n"
      operationId: predictions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/version_prediction_request'
      responses:
        '200':
          description: Success
  '/predictions/{prediction_id}':
    get:
      summary: Get a prediction
      description: "Get the current state of a prediction.\n\nExample cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu\n```\n\nThe response will be the prediction object:\n\n```json\n{\n  \"id\": \"gm3qorzdhgbfurvjtvhg6dckhu\",\n  \"model\": \"replicate/hello-world\",\n  \"version\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",\n  \"input\": {\n    \"text\": \"Alice\"\n  },\n  \"logs\": \"\",\n  \"output\": \"hello Alice\",\n  \"error\": null,\n  \"status\": \"succeeded\",\n  \"created_at\": \"2023-09-08T16:19:34.765994Z\",\n  \"data_removed\": false,\n  \"started_at\": \"2023-09-08T16:19:34.779176Z\",\n  \"completed_at\": \"2023-09-08T16:19:34.791859Z\",\n  \"metrics\": {\n    \"predict_time\": 0.012683\n  },\n  \"urls\": {\n    \"cancel\": \"https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel\",\n    \"get\": \"https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu\"\n  }\n}\n```\n\n`status` will be one of:\n\n- `starting`: the prediction is starting up. If this status lasts longer than a few seconds, then it's typically because a new worker is being started to run the prediction.\n- `processing`: the `predict()` method of the model is currently running.\n- `succeeded`: the prediction completed successfully.\n- `failed`: the prediction encountered an error during processing.\n- `canceled`: the prediction was canceled by its creator.\n\nIn the case of success, `output` will be an object containing the output of the model. Any files will be represented as HTTPS URLs. You'll need to pass the `Authorization` header to request them.\n\nIn the case of failure, `error` will contain the error encountered during the prediction.\n\nTerminated predictions (with a status of `succeeded`, `failed`, or `canceled`) will include a `metrics` object with a `predict_time` property showing the amount of CPU or GPU time, in seconds, that the prediction used while running. It won't include time waiting for the prediction to start.\n\nAll input parameters, output values, and logs are automatically removed after an hour, by default, for predictions created through the API.\n\nYou must save a copy of any data or files in the output if you'd like to continue using them. The `output` key will still be present, but it's value will be `null` after the output has been removed.\n\nOutput files are served by `replicate.delivery` and its subdomains. If you use an allow list of external domains for your assets, add `replicate.delivery` and `*.replicate.delivery` to it.\n"
      operationId: predictions.get
      parameters:
        - name: prediction_id
          in: path
          description: "The ID of the prediction to get.\n"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/prediction_response'
  '/predictions/{prediction_id}/cancel':
    post:
      summary: Cancel a prediction
      operationId: predictions.cancel
      parameters:
        - name: prediction_id
          in: path
          description: "The ID of the prediction to cancel.\n"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
  /trainings:
    get:
      summary: List trainings
      description: "Get a paginated list of trainings that you've created. This will include trainings created from the API and the website. It will return 100 records per page.\n\nExample cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/trainings\n```\n\nThe response will be a paginated JSON array of training objects, sorted with the most recent training first:\n\n```json\n{\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"completed_at\": \"2023-09-08T16:41:19.826523Z\",\n      \"created_at\": \"2023-09-08T16:32:57.018467Z\",\n      \"error\": null,\n      \"id\": \"zz4ibbonubfz7carwiefibzgga\",\n      \"input\": {\n        \"input_images\": \"https://example.com/my-input-images.zip\"\n      },\n      \"metrics\": {\n        \"predict_time\": 502.713876\n      },\n      \"output\": {\n        \"version\": \"...\",\n        \"weights\": \"...\"\n      },\n      \"started_at\": \"2023-09-08T16:32:57.112647Z\",\n      \"source\": \"api\",\n      \"status\": \"succeeded\",\n      \"urls\": {\n        \"get\": \"https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga\",\n        \"cancel\": \"https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga/cancel\"\n      },\n      \"model\": \"stability-ai/sdxl\",\n      \"version\": \"da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\",\n    }\n  ]\n}\n```\n\n`id` will be the unique ID of the training.\n\n`source` will indicate how the training was created. Possible values are `web` or `api`.\n\n`status` will be the status of the training. Refer to [get a single training](#trainings.get) for possible values.\n\n`urls` will be a convenience object that can be used to construct new API requests for the given training.\n\n`version` will be the unique ID of model version used to create the training.\n"
      operationId: trainings.list
      responses:
        '200':
          description: Success
  '/trainings/{training_id}':
    get:
      summary: Get a training
      description: "Get the current state of a training.\n\nExample cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga\n```\n\nThe response will be the training object:\n\n```json\n{\n  \"completed_at\": \"2023-09-08T16:41:19.826523Z\",\n  \"created_at\": \"2023-09-08T16:32:57.018467Z\",\n  \"error\": null,\n  \"id\": \"zz4ibbonubfz7carwiefibzgga\",\n  \"input\": {\n    \"input_images\": \"https://example.com/my-input-images.zip\"\n  },\n  \"logs\": \"...\",\n  \"metrics\": {\n    \"predict_time\": 502.713876\n  },\n  \"output\": {\n    \"version\": \"...\",\n    \"weights\": \"...\"\n  },\n  \"started_at\": \"2023-09-08T16:32:57.112647Z\",\n  \"status\": \"succeeded\",\n  \"urls\": {\n    \"get\": \"https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga\",\n    \"cancel\": \"https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga/cancel\"\n  },\n  \"model\": \"stability-ai/sdxl\",\n  \"version\": \"da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\",\n}\n```\n\n`status` will be one of:\n\n- `starting`: the training is starting up. If this status lasts longer than a few seconds, then it's typically because a new worker is being started to run the training.\n- `processing`: the `train()` method of the model is currently running.\n- `succeeded`: the training completed successfully.\n- `failed`: the training encountered an error during processing.\n- `canceled`: the training was canceled by its creator.\n\nIn the case of success, `output` will be an object containing the output of the model. Any files will be represented as HTTPS URLs. You'll need to pass the `Authorization` header to request them.\n\nIn the case of failure, `error` will contain the error encountered during the training.\n\nTerminated trainings (with a status of `succeeded`, `failed`, or `canceled`) will include a `metrics` object with a `predict_time` property showing the amount of CPU or GPU time, in seconds, that the training used while running. It won't include time waiting for the training to start.\n"
      operationId: trainings.get
      parameters:
        - name: training_id
          in: path
          description: "The ID of the training to get.\n"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
  '/trainings/{training_id}/cancel':
    post:
      summary: Cancel a training
      operationId: trainings.cancel
      parameters:
        - name: training_id
          in: path
          description: "The ID of the training you want to cancel.\n"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
  /webhooks/default/secret:
    get:
      summary: Get the signing secret for the default webhook
      description: "Get the signing secret for the default webhook endpoint. This is used to verify that webhook requests are coming from Replicate.\n\nExample cURL request:\n\n```console\ncurl -s \\\n  -H \"Authorization: Bearer <paste-your-token-here>\" \\\n  https://api.replicate.com/v1/webhooks/default/secret\n```\n\nThe response will be a JSON object with a `key` property:\n\n```json\n{\n  \"key\": \"...\"\n}\n```\n"
      operationId: webhooks.default.secret.get
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string
                    description: The signing secret.
components:
  schemas:
    prediction_request:
      required:
        - input
      type: object
      properties:
        input:
          type: object
          description: "The model's input as a JSON object. The input schema depends on what model you are running. To see the available inputs, click the \"API\" tab on the model you are running or [get the model version](#models.versions.get) and look at its `openapi_schema` property. For example, [stability-ai/sdxl](https://replicate.com/stability-ai/sdxl) takes `prompt` as an input.\n\nFiles should be passed as HTTP URLs or data URLs.\n\nUse an HTTP URL when:\n\n- you have a large file > 256kb\n- you want to be able to use the file multiple times\n- you want your prediction metadata to be associable with your input files\n\nUse a data URL when:\n\n- you have a small file <= 256kb\n- you don't want to upload and host the file somewhere\n- you don't need to use the file again (Replicate will not store it)\n"
        stream:
          type: boolean
          description: "**This field is deprecated.**\n\nRequest a URL to receive streaming output using [server-sent events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events).\n\nThis field is no longer needed as the returned prediction will always have a `stream` entry in its `url` property if the model supports streaming.\n"
        webhook:
          type: string
          description: "An HTTPS URL for receiving a webhook when the prediction has new output. The webhook will be a POST request where the request body is the same as the response body of the [get prediction](#predictions.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. Replicate will not follow redirects when sending webhook requests to your service, so be sure to specify a URL that will resolve without redirecting.\n"
        webhook_events_filter:
          type: array
          items:
            enum:
              - start
              - output
              - logs
              - completed
            type: string
          description: "By default, we will send requests to your webhook URL whenever there are new outputs or the prediction has finished. You can change which events trigger webhook requests by specifying `webhook_events_filter` in the prediction request:\n\n- `start`: immediately on prediction start\n- `output`: each time a prediction generates an output (note that predictions can generate multiple outputs)\n- `logs`: each time log output is generated by a prediction\n- `completed`: when the prediction reaches a terminal state (succeeded/canceled/failed)\n\nFor example, if you only wanted requests to be sent at the start and end of the prediction, you would provide:\n\n```json\n{\n  \"input\": {\n    \"text\": \"Alice\"\n  },\n  \"webhook\": \"https://example.com/my-webhook\",\n  \"webhook_events_filter\": [\"start\", \"completed\"]\n}\n```\n\nRequests for event types `output` and `logs` will be sent at most once every 500ms. If you request `start` and `completed` webhooks, then they'll always be sent regardless of throttling.\n"
      additionalProperties: false
    training_request:
      required:
        - destination
        - input
      type: object
      properties:
        destination:
          type: string
          description: "A string representing the desired model to push to in the format `{destination_model_owner}/{destination_model_name}`. This should be an existing model owned by the user or organization making the API request. If the destination is invalid, the server will return an appropriate 4XX response.\n"
        input:
          type: object
          description: "An object containing inputs to the Cog model's `train()` function.\n"
        webhook:
          type: string
          description: 'An HTTPS URL for receiving a webhook when the training completes. The webhook will be a POST request where the request body is the same as the response body of the [get training](#trainings.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. Replicate will not follow redirects when sending webhook requests to your service, so be sure to specify a URL that will resolve without redirecting.'
        webhook_events_filter:
          type: array
          items:
            enum:
              - start
              - output
              - logs
              - completed
            type: string
          description: "By default, we will send requests to your webhook URL whenever there are new outputs or the training has finished. You can change which events trigger webhook requests by specifying `webhook_events_filter` in the training request:\n\n- `start`: immediately on training start\n- `output`: each time a training generates an output (note that trainings can generate multiple outputs)\n- `logs`: each time log output is generated by a training\n- `completed`: when the training reaches a terminal state (succeeded/canceled/failed)\n\nFor example, if you only wanted requests to be sent at the start and end of the training, you would provide:\n\n```json\n{\n  \"destination\": \"my-organization/my-model\",\n  \"input\": {\n    \"text\": \"Alice\"\n  },\n  \"webhook\": \"https://example.com/my-webhook\",\n  \"webhook_events_filter\": [\"start\", \"completed\"]\n}\n```\n\nRequests for event types `output` and `logs` will be sent at most once every 500ms. If you request `start` and `completed` webhooks, then they'll always be sent regardless of throttling.\n"
    version_prediction_request:
      required:
        - version
        - input
      type: object
      properties:
        input:
          type: object
          description: "The model's input as a JSON object. The input schema depends on what model you are running. To see the available inputs, click the \"API\" tab on the model you are running or [get the model version](#models.versions.get) and look at its `openapi_schema` property. For example, [stability-ai/sdxl](https://replicate.com/stability-ai/sdxl) takes `prompt` as an input.\n\nFiles should be passed as HTTP URLs or data URLs.\n\nUse an HTTP URL when:\n\n- you have a large file > 256kb\n- you want to be able to use the file multiple times\n- you want your prediction metadata to be associable with your input files\n\nUse a data URL when:\n\n- you have a small file <= 256kb\n- you don't want to upload and host the file somewhere\n- you don't need to use the file again (Replicate will not store it)\n"
        stream:
          type: boolean
          description: "**This field is deprecated.**\n\nRequest a URL to receive streaming output using [server-sent events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events).\n\nThis field is no longer needed as the returned prediction will always have a `stream` entry in its `url` property if the model supports streaming.\n"
        version:
          type: string
          description: The ID of the model version that you want to run.
        webhook:
          type: string
          description: "An HTTPS URL for receiving a webhook when the prediction has new output. The webhook will be a POST request where the request body is the same as the response body of the [get prediction](#predictions.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. Replicate will not follow redirects when sending webhook requests to your service, so be sure to specify a URL that will resolve without redirecting.\n"
        webhook_events_filter:
          type: array
          items:
            enum:
              - start
              - output
              - logs
              - completed
            type: string
          description: "By default, we will send requests to your webhook URL whenever there are new outputs or the prediction has finished. You can change which events trigger webhook requests by specifying `webhook_events_filter` in the prediction request:\n\n- `start`: immediately on prediction start\n- `output`: each time a prediction generates an output (note that predictions can generate multiple outputs)\n- `logs`: each time log output is generated by a prediction\n- `completed`: when the prediction reaches a terminal state (succeeded/canceled/failed)\n\nFor example, if you only wanted requests to be sent at the start and end of the prediction, you would provide:\n\n```json\n{\n  \"version\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",\n  \"input\": {\n    \"text\": \"Alice\"\n  },\n  \"webhook\": \"https://example.com/my-webhook\",\n  \"webhook_events_filter\": [\"start\", \"completed\"]\n}\n```\n\nRequests for event types `output` and `logs` will be sent at most once every 500ms. If you request `start` and `completed` webhooks, then they'll always be sent regardless of throttling.\n"
      additionalProperties: false
    prediction_response:
      type: object
      properties:
        completed_at:
          type: string
          format: string
        created_at:
          type: string
          format: string
        data_removed:
          type: boolean
        error:
          type: 'null'
        id:
          type: string
          format: string
        input:
          type: object
          properties:
            seed:
              type: number
              format: int64
            steps:
              type: number
              format: int64
            prompt:
              type: string
              format: string
            guidance:
              type: number
              format: number
            interval:
              type: number
              format: int64
            aspect_ratio:
              type: string
              format: string
            safety_tolerance:
              type: number
              format: int64
        logs:
          type: string
          format: string
        metrics:
          type: object
          properties:
            image_count:
              type: number
              format: int64
            predict_time:
              type: number
              format: number
            total_time:
              type: number
              format: number
        output:
          type: string
          format: string
        started_at:
          type: string
          format: string
        status:
          type: string
          format: string
        urls:
          type: object
          properties:
            get:
              type: string
              format: string
            cancel:
              type: string
              format: string
        version:
          type: string
          format: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: "All API requests must include a valid API token in the `Authorization` request header. The token must be prefixed by \"Bearer\", followed by a space and the token value.\nExample: `Authorization: Bearer r8_Hw***********************************`\nFind your tokens at https://replicate.com/account/api-tokens\n"
security:
  - bearerAuth: [ ]
externalDocs:
  description: Replicate HTTP API
  url: https://replicate.com/docs/reference/http